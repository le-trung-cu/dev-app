generator client {
  provider = "prisma-client-js"
  output   = "../src/generated/prisma-jira-database/jira-database-client-types"
}

datasource db {
  provider = "sqlite"
  url      = env("SQLITE_JIRA_DATABASE_URL")
}

enum Role {
  Admin
  Member
}

enum Priority {
  High
  Medium
  Low
}

enum TaskStatus {
  Backlog
  Todo
  InProcess
  InReview
  Done
}

model Workspace {
  id String @id @default(uuid())

  name           String
  userId         String
  imageUrl       String
  inviteCode     String
  members        Member[]
  projects       Project[]
  tasks          Task[]
  canvasProjects CanvasProject[]
  channels       Channel[]
  createdAt      DateTime        @default(now())
  updatedAt      DateTime        @updatedAt
}

model Project {
  id String @id @default(uuid())

  name        String
  workspaceId String
  workspace   Workspace @relation(fields: [workspaceId], references: [id])
  task        Task[]
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
}

model Task {
  id          String      @id @default(uuid())
  name        String
  endDate     DateTime?
  workspaceId String
  workspace   Workspace   @relation(fields: [workspaceId], references: [id])
  projectId   String?
  project     Project?    @relation(fields: [projectId], references: [id])
  assigneeId  String?
  assignee    Member?     @relation(fields: [assigneeId], references: [id])
  status      TaskStatus?
  priority    Priority?
  position    Int         @default(1)
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt
}

model Member {
  id          String    @id @default(uuid())
  userId      String
  workspaceId String
  workspace   Workspace @relation(fields: [workspaceId], references: [id])
  role        Role
  tasks       Task[]
  joined      Boolean   @default(false)

  message                Message[]
  conversationsInitiated Conversation[] @relation("MemberOne")
  conversationsReceived  Conversation[] @relation("MemberTwo")

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([userId])
  @@index([workspaceId])
}

model CanvasProject {
  id           String    @id @default(uuid())
  name         String
  workspaceId  String
  workspace    Workspace @relation(fields: [workspaceId], references: [id])
  userId       String
  json         String
  height       Int
  width        Int
  thumbnailUrl String?
  isTemplate   Boolean   @default(false)
  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @updatedAt
}

enum ChannelType {
  TEXT
  AUDIO
  VIDEO
}

model Channel {
  id          String    @id @default(uuid())
  name        String
  workspaceId String
  workspace   Workspace @relation(fields: [workspaceId], references: [id])
  messages    Message[]
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
}

model Message {
  id              String    @id @default(uuid())
  workspaceId     String
  content         String
  fileUrl         String?
  memberId        String
  member          Member    @relation(fields: [memberId], references: [id], onDelete: Cascade)
  channelId       String
  channel         Channel   @relation(fields: [channelId], references: [id], onDelete: Cascade)
  parentMessageId String?
  parentMessage   Message?  @relation("MessageToReplies", fields: [parentMessageId], references: [id], onDelete: Cascade)
  replies         Message[] @relation("MessageToReplies")
  deleted         Boolean   @default(false)
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt

  @@index([channelId])
  @@index([memberId])
}

model Conversation {
  workspaceId String
  memberOneId String
  memberOne   Member @relation("MemberOne", fields: [memberOneId], references: [id], onDelete: Cascade)
  memberTwoId String
  memberTwo   Member @relation("MemberTwo", fields: [memberTwoId], references: [id], onDelete: Cascade)

  @@id([workspaceId, memberOneId, memberTwoId])
  @@unique([memberOneId, memberTwoId])
  @@index([memberTwoId])
}
